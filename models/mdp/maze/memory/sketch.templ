mdp

// 3 | x x x x x
// 2 | x   x   x
// 1 | x   x   x
// 0 | x   x   x
// y ____________
//   x 0 1 2 3 4

// can go in this direction
formula u = y<3;
formula r = y=3 & x<4;
formula d = y>0 & (x=0 | x=2 | x=4);
formula l = y=3 & x>0;

// target cell
formula goal = x=2 & y=0;
formula bad = (x=0 & y=0);

// initial states
init ((x=1)&(y=3)) | ((x=0)&(y=1)) endinit;

// updates of coordinates (if possible)
formula yu = u ? (y+1) : y;
formula xr = r ? (x+1) : x;
formula yd = d ? (y-1) : y;
formula xl = l ? (x-1) : x;


module memory

    mem: [0..2] init 0;
    [up]    true -> (mem'=0);
    [up]    true -> (mem'=1);
    [up]    true -> (mem'=2);
    //[up]  true -> (mem'=3);
    
    [right] true -> (mem'=0);
    [right] true -> (mem'=1);
    [right] true -> (mem'=2);
    //[right]   true -> (mem'=3);

    [down] true -> (mem'=0);
    [down] true -> (mem'=1);
    [down] true -> (mem'=2);
    //[down]   true -> (mem'=3);

    [left] true -> (mem'=0);
    [left] true -> (mem'=1);
    [left] true -> (mem'=2);
    //[left]   true -> (mem'=3);

endmodule


module maze

	x : [0..4];
    y : [0..3];

	// moving around the maze (all combinations)
    [up]        !bad -> 0.8: (y'=yu) + 0.08: (x'=xr) + 0.08: (x'=xl) + 0.04: (y'=yd);
    [right]     !bad -> 0.8: (x'=xr) + 0.08: (y'=yu) + 0.08: (y'=yd) + 0.04: (x'=xl);
    [down]      !bad -> 0.8: (y'=yd) + 0.08: (x'=xr) + 0.08: (x'=xl) + 0.04: (y'=yu);
    [left]      !bad -> 0.8: (x'=xl) + 0.08: (y'=yu) + 0.08: (y'=yd) + 0.04: (x'=xr);
	
endmodule



