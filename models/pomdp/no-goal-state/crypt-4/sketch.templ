

// dining cryptographers
// gxn 27/01/16

// pomdp model
pomdp


// observable variables (for crypt4)
// the announcements of all cryptographers 
// only its own coin and the coin of its left neighbour
// if it guesses correctly (this is the target so needs to be observable)
// also local states of modules this only indicates:
// - if a cryptographer has announced
// - if the master has made its choice
observables
	coin1, coin4, m, s1, s2, s3, s4, guess, correct, agree1, agree2, agree3, agree4, finished
endobservables

// constants used in renaming
const int p1=1;
const int p2=2;
const int p3=3;
const int p4=4;

module master

	m : [0..1]; // local state (has chosen who pays)
	pay : [1..4]; // who actually pays

	// randomly choose who pays
	[] !finished & m=0 -> 1/3 : (m'=1) & (pay'=1) + 1/3 : (m'=1) & (pay'=2) + 1/3 : (m'=1) & (pay'=3);

	// test cases
	//[] m=0 -> (m'=1); // master pays
	//[] m=0 -> (m'=1) & (pay'=1); // crypt 1 pays
	//[] m=0 -> (m'=1) & (pay'=2); // crypt 2 pays
	//[] m=0 -> (m'=1) & (pay'=3); // crypt 3 pays
	//[] m=0 -> (m'=1) & (pay'=4); // crypt 4 pays

    [restart] true -> (m'=0) & (pay'=1);
endmodule

module crypt1

	coin1 : [0..2]; // value of coin
	s1 : [0..1]; // local state (has announced yet)
	agree1 : [0..1]; // agree or not

	// flip coin and share values
	[flip] !finished & m=1 & coin1=0 -> 0.5 : (coin1'=1) + 0.5 : (coin1'=2);

	// make choice (once relevant coins have been flipped)
	// does not pay
	[choice1] !finished & s1=0 & coin1>0 & coin2>0 & coin1=coin2 & (pay!=p1) -> (s1'=1) & (agree1'=1);
	[choice1] !finished & s1=0 & coin1>0 & coin2>0 & !(coin1=coin2) & (pay!=p1) -> (s1'=1);
	// pays
	[choice1] !finished & s1=0 & coin1>0 & coin2>0 & coin1=coin2 & (pay=p1) -> (s1'=1);
	[choice1] !finished & s1=0 & coin1>0 & coin2>0 & !(coin1=coin2) & (pay=p1) -> (s1'=1) & (agree1'=1);

	// when everyone has announced
	[check] !finished & s1=1 -> true;

    [restart] true -> (coin1'=0) & (s1'=0) & (agree1'=0);

endmodule
// construct further cryptographers through renaming
module crypt2 =crypt1[coin1=coin2, s1=s2, p1=p2, agree1=agree2, coin2=coin3, choice1=choice2 ] endmodule
module crypt3 =crypt1[coin1=coin3, s1=s3, p1=p3, agree1=agree3, coin2=coin4, choice1=choice3 ] endmodule

// the cryptographer that guesses who pays
module crypt4

	coin4 : [0..2];
	s4 : [0..1];
	agree4 : [0..1];
	guess : [0..3];
	correct : [0..1];
	finished : bool init false;

	// flip coin
	[flip] !finished & !finished & m=1 & coin4=0 -> 0.5 : (coin4'=1) + 0.5 : (coin4'=2);

	// make choice (once relevant coins have been flipped)
	// assume does not pay
	[choice4] !finished & s4=0 & coin4>0 & coin1>0 & coin4=coin1 -> (s4'=1) & (agree4'=1);
	[choice4] !finished & s4=0 & coin4>0 & coin1>0 & !(coin4=coin1) -> (s4'=1);
	// pays
	[choice4] !finished & s4=0 & coin4>0 & coin1>0 & coin4=coin1 & (pay=p4) -> (s4'=1);
	[choice4] !finished & s4=0 & coin4>0 & coin1>0 & !(coin4=coin1) & (pay=p4) -> (s4'=1) & (agree4'=1);

	// after everyone has announced guess who payed
	[guess1] !finished & s4=1 & guess=0 -> (guess'=1);
	[guess2] !finished & s4=1 & guess=0 -> (guess'=2);
	[guess3] !finished & s4=1 & guess=0 -> (guess'=3);

	// check whether guessed correctly
	[check] !finished & s4=1 & guess>0 & guess=pay -> (correct'=1) & (finished'=true);
	[check] !finished & s4=1 & guess>0 & !(guess=pay) -> (finished'=true);

    [restart] finished -> (coin4'=0) & (s4'=0) & (agree4'=0) & (guess'=0) & (correct'=0) & (finished'=false);
endmodule

// target observation
label "goal" = correct=1;
